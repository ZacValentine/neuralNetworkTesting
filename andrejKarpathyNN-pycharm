import math
import numpy as np
import matplotlib.pyplot as plt


class Value:

    def __init__(self, data, _children=(), _op='', label=''):
        self.data = data
        self.grad = 0.0
        self._prev = set(_children)
        self._op = _op
        self.label = label

    def __repr__(self):
        return f"Value(data={self.data})"

    def __add__(self, other):
        out = Value(self.data + other.data, (self, other), '+')
        return out

    def __mul__(self, other):
        out = Value(self.data * other.data, (self, other), '*')
        return out


a = Value(2.0, label='a')
b = Value(-3.0, label='b')
c = Value(10.0, label='c')
# a + b #same as - a.__add__(b)
e = a * b;
e.label = 'e'
# d = a * b + c  # same as a.__mul(b).add(c)
d = e + c;
d.label = 'd'
f = Value(-2.0, label='f')
L = d * f;
L.label = 'L'

#

# take derivatives of each layer, with respect to the each thing on that layer
# dL/dd = d df/dd = f
# dL/df = d df/df = d

# dd/dc d = c + e D's rate of change with respect to C is 1 because it is just adding the e
# WANT dL/dc = (dL/dd) * (dd/dc) chain rule/related rates
# KNOW dL/dd and dd/dc
# (dL/dd) -2 * dd/dc = -2 * 1 = -2

# dL/da = (dL/de) * (de/da)
#  -2 * a*b = -2 * b = 6
# a.grad = -2.0 * -3.0
# b.grad = -2.0 * 2.0

a.grad = 6.0
b.grad = -4.0

c.grad = -2.0
e.grad = -2.0

f.grad = 4.0
d.grad = -2.0

L.grad = 1.0

#

a.data += 0.01 * a.grad
b.data += 0.01 * b.grad
c.data += 0.01 * c.grad
f.data += 0.01 * f.grad

e = a * b
d = e + c
L = d * f

print(L.data)


#

def lol():
    h = 0.0001

    a = Value(2.0, label='a')
    b = Value(-3.0, label='b')
    c = Value(10.0, label='c')
    e = a * b;
    e.label = 'e'
    d = e + c;
    d.label = 'd'
    f = Value(-2.0, label='f')
    L = d * f;
    L.label = 'L'
    L1 = L.data

    a = Value(2.0, label='a')
    b = Value(-3.0, label='b')
    c = Value(10.0, label='c')
    e = a * b;
    e.label = 'e'
    d = e + c;
    d.label = 'd'
    f = Value(-2.0, label='f')
    L = d * f;
    L.label = 'L'
    L2 = L.data

    print((L2 - L1) / h)


lol()

#
